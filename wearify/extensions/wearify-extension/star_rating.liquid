{% assign enabled_flag = false %}
{%- if product and product.metafields.wearify.enabled -%}
  {% assign enabled_flag = product.metafields.wearify.enabled.value %}
{%- elsif block and block.settings and block.settings.product and block.settings.product.metafields.wearify.enabled -%}
  {% assign enabled_flag = block.settings.product.metafields.wearify.enabled.value %}
{%- endif -%}

{% if enabled_flag == true or enabled_flag == 'true' %}
  {% comment %} Get product data {% endcomment %}
  {% assign wearify_image_url = '' %}
  {% if product and product.featured_image %}
    {% assign wearify_image_url = product.featured_image | image_url: width: 600 %}
  {% endif %}
  
  {% assign wearify_product_title = '' %}
  {% if product %}
    {% assign wearify_product_title = product.title %}
  {% endif %}
  
  {% comment %} Debug: Check if we have product title {% endcomment %}
  {% if wearify_product_title == blank %}
    {% comment %} Try to get title from page context as fallback {% endcomment %}
    {% if page_title contains ' - ' %}
      {% assign wearify_product_title = page_title | split: ' - ' | first %}
    {% elsif page_title %}
      {% assign wearify_product_title = page_title %}
    {% endif %}
    
    {% comment %} Additional fallback: try to get from product handle or other sources {% endcomment %}
    {% if wearify_product_title == blank and product.handle %}
      {% assign wearify_product_title = product.handle | replace: '-', ' ' | capitalize %}
    {% endif %}
    
    {% comment %} Final fallback: use a default title {% endcomment %}
    {% if wearify_product_title == blank %}
      {% assign wearify_product_title = 'Product' %}
    {% endif %}
  {% endif %}
  
  
  {% assign wearify_product_id = '' %}
  {% if product %}
    {% assign wearify_product_id = product.id %}
  {% endif %}
  
  {% comment %} Additional fallback: try to get product ID from URL query parameters {% endcomment %}
  {% if wearify_product_id == blank %}
    {% comment %} Try to extract product ID from URL query parameters {% endcomment %}
    {% if request.query.product_id != blank %}
      {% assign wearify_product_id = request.query.product_id %}
    {% elsif request.query.id != blank %}
      {% assign wearify_product_id = request.query.id %}
    {% elsif request.page_type == 'product' and request.path contains '/products/' %}
      {% assign product_handle = request.path | split: '/products/' | last | split: '?' | first %}
      {% comment %} This is a fallback - in a real scenario, you'd need to look up the product by handle {% endcomment %}
      {% assign wearify_product_id = 'fallback-' | append: product_handle %}
    {% endif %}
  {% endif %}
  
  {% comment %} Final fallback: use a default product ID {% endcomment %}
  {% if wearify_product_id == blank %}
    {% assign wearify_product_id = 'default-product' %}
  {% endif %}
  
  {% comment %} Get API key with fallbacks {% endcomment %}
  {% assign wearify_api_key = '' %}
  
  {% comment %} Debug: Check what metafields are available {% endcomment %}
  <!-- Debug: Product metafields available: {{ product.metafields | map: 'key' | join: ', ' }} -->
  <!-- Debug: Block product metafields available: {{ block.settings.product.metafields | map: 'key' | join: ', ' }} -->
  
  {% if product and product.metafields.wearify.key %}
    {% assign wearify_api_key = product.metafields.wearify.key.value %}
    <!-- Debug: Using product metafield API key -->
  {% elsif block and block.settings and block.settings.product and block.settings.product.metafields.wearify.key %}
    {% assign wearify_api_key = block.settings.product.metafields.wearify.key.value %}
    <!-- Debug: Using block product metafield API key -->
  {% endif %}
  
  {% comment %} Debug: Check API key extraction {% endcomment %}
  {% if wearify_api_key == blank %}
    <!-- Debug: API key is blank, trying alternative methods -->
    {% comment %} Try alternative metafield access methods {% endcomment %}
    {% if product and product.metafields.wearify.key.value %}
      {% assign wearify_api_key = product.metafields.wearify.key.value %}
      <!-- Debug: Found API key via alternative product method -->
    {% elsif block and block.settings and block.settings.product and block.settings.product.metafields.wearify.key.value %}
      {% assign wearify_api_key = block.settings.product.metafields.wearify.key.value %}
      <!-- Debug: Found API key via alternative block product method -->
    {% endif %}
  {% endif %}
  
  {% comment %} Get preview key from URL query parameter {% endcomment %}
  {% assign wearify_preview_key = '' %}
  {% if request.query.preview_key != blank %}
    {% assign wearify_preview_key = request.query.preview_key %}
  {% elsif product and product.metafields.wearify.preview_key %}
    {% assign wearify_preview_key = product.metafields.wearify.preview_key.value %}
  {% elsif block and block.settings and block.settings.product and block.settings.product.metafields.wearify.preview_key %}
    {% assign wearify_preview_key = block.settings.product.metafields.wearify.preview_key.value %}
  {% endif %}
  
  {% comment %} Debug output - remove in production {% endcomment %}
  <!-- Wearify Debug: Product Title = "{{ wearify_product_title }}" -->
  <!-- Wearify Debug: Product ID = "{{ wearify_product_id }}" -->
  <!-- Wearify Debug: Product Image = "{{ wearify_image_url }}" -->
  <!-- Wearify Debug: API Key = "{{ wearify_api_key }}" -->
  <!-- Wearify Debug: Preview Key = "{{ wearify_preview_key }}" -->
  
  <div 
    id="wearify-root"
    data-product-id="{{ wearify_product_id }}"
    data-product-image="{{ wearify_image_url }}"
    data-product-name="{{ wearify_product_title | escape }}"
    data-api-key="{{ wearify_api_key }}"
    data-preview-key="{{ wearify_preview_key }}"
  ></div>
  
  <script>
    // Function to fetch API key from the app
    async function fetchWearifyApiKey() {
      try {
        console.log('Fetching Wearify API key...');
        // Get shop from the current domain
        const shop = window.location.hostname.replace('.myshopify.com', '');
        const response = await fetch(`/apps/wearify/api/public/wearify-key?shop=${shop}`, {
          method: 'GET'
        });
        console.log('Response status:', response.status);
        
        if (response.ok) {
          const data = await response.json();
          console.log('API key response:', data);
          return data.apiKey;
        } else {
          console.log('API call failed, using fallback');
          return null;
        }
      } catch (error) {
        console.error('Failed to fetch Wearify API key:', error);
        return null;
      }
    }

    // Initialize Wearify data
    async function initializeWearifyData() {
      console.log('Initializing Wearify data...');
      const apiKey = await fetchWearifyApiKey();
      console.log('Fetched API key:', apiKey);
      
      // Pass data from Liquid to JavaScript
      window.wearifyData = {
        productId: "{{ wearify_product_id }}",
        productImage: "{{ wearify_image_url }}",
        productName: "{{ wearify_product_title | escape }}",
        apiKey: apiKey || "{{ wearify_api_key }}", // Fallback to metafield if API call fails
        previewKey: "{{ wearify_preview_key }}"
      };
      
      // Update the data attribute on the root element
      const rootElement = document.getElementById('wearify-root');
      if (rootElement) {
        console.log('Root element found, current data-api-key:', rootElement.getAttribute('data-api-key'));
        if (apiKey) {
          rootElement.setAttribute('data-api-key', apiKey);
          console.log('Updated data-api-key to:', apiKey);
          // Also update the window.wearifyData object
          window.wearifyData.apiKey = apiKey;
          console.log('Updated window.wearifyData.apiKey to:', apiKey);
        } else {
          console.log('No API key received, keeping current value:', rootElement.getAttribute('data-api-key'));
        }
      } else {
        console.error('Root element not found');
      }
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeWearifyData);
    } else {
      initializeWearifyData();
    }
  </script>
{% endif %}


